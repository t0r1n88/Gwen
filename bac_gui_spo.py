# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\1\PycharmProjects\Galatea\base_app.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import shutil


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(542, 537)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(170, 10, 231, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        # Создаем кнопку выбора файлов
        self.getFileNamesButton = QtWidgets.QPushButton(self.centralwidget)
        self.getFileNamesButton.setGeometry(QtCore.QRect(200, 120, 161, 51))
        self.getFileNamesButton.setObjectName("pushButton")
        # Привязываем метод выбора файлов
        self.getFileNamesButton.clicked.connect(self.getFileNames)

        # Создаем кнопку выбора конечной папки
        self.getDirectoryButton = QtWidgets.QPushButton(self.centralwidget)
        self.getDirectoryButton.setGeometry(QtCore.QRect(200, 200, 161, 51))
        self.getDirectoryButton.setObjectName("pushButton_2")
        # Привязываем метод выбора папки
        self.getDirectoryButton.clicked.connect(self.getDirectory)

        # Создаем кнопку Выполнения
        self.makeButton = QtWidgets.QPushButton(self.centralwidget)
        self.makeButton.setGeometry(QtCore.QRect(200, 400, 161, 51))
        self.makeButton.setObjectName("pushButton_3")
        # Привязываем метод выполнения
        self.makeButton.clicked.connect(self.run_script)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 542, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Кассандра"))
        self.label.setText(_translate("MainWindow", "Обработка данных"))
        self.getFileNamesButton.setText(_translate("MainWindow", "Выберите файлы"))
        self.getDirectoryButton.setText(_translate("MainWindow", "Выберите конечную папку"))
        self.makeButton.setText(_translate("MainWindow", "Выполнить"))

    def getDirectory(self):
        """
        Метод для получения пути к папке
        :return: Пути к папке
        """
        self.output_dir = QFileDialog.getExistingDirectory(MainWindow, "Выбрать Папку")

    def getFileNames(self):
        """
        Метод для получения путей к файлам
        :return: Пути к файлам
        """
        # В filenames хранится список файлов
        """
        Можно выбирать допустимые типы файлов. Пример
             "Выбрать файл",
         ".",
         "Text Files(*.txt);;JPEG Files(*.jpeg);;\
         PNG Files(*.png);;GIF File(*.gif);;All Files(*)")

        """
        self.filenames, ok = QFileDialog.getOpenFileNames(MainWindow,
                                                          "Выберите несколько файлов",
                                                          ".",
                                                          "All Files(*.xlsx)")

    def run_script(self):
        """
        Метод запускающий выполнение целевой  функции
        """
        for file in self.filenames:
            shutil.copy(file, self.output_dir)


if __name__ == "__main__":
    import sys

    # Создаем объект приложения(экземпляр класса)
    # Обязательная строка
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
